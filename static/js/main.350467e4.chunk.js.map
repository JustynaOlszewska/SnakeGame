{"version":3,"sources":["molecule/Canvas.js","molecule/Form.js","molecule/Points.js","organizm/Console.js","Templates/Main.js","pages/App.js","index.js"],"names":["Canvas","setPoints","points","easy","score","myRef","useRef","myGameArea","myGamePiece","myGameApple","myGameBarrier","changeTime","this","interval","requestAnimationFrame","updateGameArea","start","ctx","current","canvas","getContext","width","height","clear","clearRect","countPoints","useCallback","elementsSnake","useEffect","cancelAnimationFrame","x","y","snakeReturnHome","snakeX","snakeY","newHead","drawBarrier","fillStyle","i","length","fillRect","color","sizeX","sizeY","console","log","Math","floor","random","randomPlaceApple","changePlaceApple","partBodySnakeCounter","partBodySnake","push","scale","scoreArray","speedX","direction","speedY","colorTail","move","Error","update","snakeTurns","map","partBody","strokeStyle","strokeRect","pop","unshift","snakeCollision","splice","setTimeout","className","ref","style","backgroundColor","onClick","Form","React","memo","click","onSubmit","e","preventDefault","htmlFor","id","value","type","Points","Console","Main","useState","option","setOption","handleClick","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gKAsXeA,EApXA,SAAC,GAAwC,IAAtCC,EAAqC,EAArCA,UAAWC,EAA0B,EAA1BA,OAAQC,EAAkB,EAAlBA,KAAMC,EAAY,EAAZA,MAEnCC,EAAQC,mBACRC,EAAaD,mBAEbE,EAAcF,mBACdG,EAAcH,mBACdI,EAAgBJ,mBAEpBC,EAAa,CACTI,WAAY,WACTC,KAAKC,SAAYC,sBAAsBC,IAE1CC,MAAO,WAEHJ,KAAKK,IAAMZ,EAAMa,QACjBN,KAAKO,OAASP,KAAKK,IAAIG,WAAW,MAClCR,KAAKO,OAAOE,MAAQ,IACpBT,KAAKO,OAAOG,OAAS,KAGzBC,MAAO,WAEHX,KAAKO,OAAOK,UAAU,EAAG,EAAGZ,KAAKO,OAAOE,MAAOT,KAAKO,OAAOG,UAKnE,IAAIG,EAAcC,uBAAY,SAACC,GAW3B,MAVa,SAATxB,EACAF,IAAYC,GAEI,WAATC,EACPF,EAAUC,EAA0B,EAAhByB,GAEN,SAATxB,GACLF,EAAUC,EAA0B,EAAhByB,GAGjBzB,IAER,CAACC,EAAMF,EAAWC,IAErB0B,qBAAU,WAEN,OADArB,EAAWI,aACJ,kBAAMkB,qBAAqBtB,EAAWM,aAE9C,IAEHe,qBAAU,WAENrB,EAAWS,UAEZ,CAACT,IAEJqB,qBAAU,WA4CNlB,EAAcQ,QAAU,IA3CxB,WAAoB,IAAD,OACfN,KAAKkB,EAAI,GACTlB,KAAKmB,EAAI,GAEI,SAAT5B,GACAF,EAAU,GACVW,KAAKkB,EAAI,CAAC,GACVlB,KAAKmB,EAAI,CAAC,GACVnB,KAAKS,MAAQ,EACbT,KAAKU,OAAS,GAIA,WAATnB,GACLK,EAAYU,QAAQc,gBAAgBxB,EAAYU,QAAQe,OAAQzB,EAAYU,QAAQgB,OAAQ1B,EAAYU,QAAQiB,SAEhHvB,KAAKkB,EAAI,CAAC,IACVlB,KAAKmB,EAAI,CAAC,KACVnB,KAAKS,MAAQ,IACbT,KAAKU,OAAS,IAIA,SAATnB,IAELK,EAAYU,QAAQc,gBAAgBxB,EAAYU,QAAQe,OAAQzB,EAAYU,QAAQgB,OAAQ1B,EAAYU,QAAQiB,SAEhHvB,KAAKkB,EAAI,CAAC,GAAI,GAAI,IAAK,IACvBlB,KAAKmB,EAAI,CAAC,GAAI,IAAK,IAAK,KACxBnB,KAAKS,MAAQ,IACbT,KAAKU,OAAS,IAElBV,KAAKwB,YAAc,WAGf,GADA7B,EAAWY,OAAOkB,UAAY,MACjB,SAATlC,EACA,IAAK,IAAImC,EAAI,EAAGA,EAAI,EAAKR,EAAES,OAAQD,IAC/B/B,EAAWY,OAAOqB,SAAS,EAAKV,EAAEQ,GAAI,EAAKP,EAAEO,GAAI,EAAKjB,MAAO,EAAKC,QAG1Ef,EAAWY,OAAOqB,SAAS,EAAKV,EAAG,EAAKC,EAAG,EAAKV,MAAO,EAAKC,YAKrE,CAACnB,EAAMK,EAAaP,IAEvB2B,qBAAU,WAwDNnB,EAAYS,QAAU,IAtDtB,SAAeY,EAAGC,EAAGU,EAAOC,EAAOC,GAAQ,IAAD,OACtCC,QAAQC,IAAI,QAEZjC,KAAKkB,EAAKgB,KAAKC,MAAM,IAAAD,KAAKE,UAAwB,EAClDpC,KAAKmB,EAAKe,KAAKC,MAAM,IAAAD,KAAKE,UAAwB,EAClDpC,KAAKkB,EAAIlB,KAAKkB,EAAIlB,KAAKkB,EAAI,GAC3BlB,KAAKmB,EAAInB,KAAKmB,EAAInB,KAAKmB,EAAI,GAC3BnB,KAAKS,MAAQqB,EACb9B,KAAKU,OAASqB,EAGd/B,KAAKqC,iBAAmB,SAACnB,EAAGC,GAKxB,OAJAD,EAAKgB,KAAKC,MAAM,IAAAD,KAAKE,UAAwB,EAC7CjB,EAAKe,KAAKC,MAAM,IAAAD,KAAKE,UAAwB,EAC7ClB,GAAQA,EAAI,GACZC,GAAQA,EAAI,IAMhBnB,KAAKsC,iBAAmB,WACpB,IAAK,IAAIZ,EAAI,EAAGA,EAAI5B,EAAcQ,QAAQY,EAAES,OAAQD,IAE5C5B,EAAcQ,QAAQY,EAAEQ,GAAK5B,EAAcQ,QAAQG,MAAQ,EAAKS,GAAK,EAAKA,GAAKpB,EAAcQ,QAAQY,EAAEQ,IAAM5B,EAAcQ,QAAQa,EAAEO,GAAK5B,EAAcQ,QAAQI,OAAS,EAAKS,GAAK,EAAKA,GAAKrB,EAAcQ,QAAQa,EAAEO,IACrNM,QAAQC,IAAI,SAEZ,EAAKI,iBAAiB,EAAKnB,EAAG,EAAKC,KAG7BvB,EAAYU,QAAQY,IAAM,EAAKA,GAAKtB,EAAYU,QAAQa,IAAM,EAAKA,GAAOvB,EAAYU,QAAQY,IAAM,EAAKA,GAAKtB,EAAYU,QAAQa,EAAI,IAAM,EAAKA,KAEvJvB,EAAYU,QAAQiC,uBAEpB3C,EAAYU,QAAQkC,cAAcC,KAAK,CACnCvB,EAAG,EAAKwB,MACRvB,EAAG,EAAKuB,QAGZ7B,EAAYjB,EAAYU,QAAQiC,sBAEhC,EAAKF,iBAAiB,EAAKnB,EAAG,EAAKC,GACnCa,QAAQC,IAAI,YAGhBtC,EAAWY,OAAOkB,UAAYI,EAE9BlC,EAAWY,OAAOqB,SAAS,EAAKV,EAAG,EAAKC,EAAGW,EAAOC,IAOxC,CAAU,GAAI,GAAI,MAAO,GAAI,OAIvDf,qBAAU,WA+KNpB,EAAYU,QAAU,IA7KtB,WAAiD,IAAD,OAA7BuB,EAA6B,uDAArB,QAASC,EAAY,uDAAJ,GACxC9B,KAAK0C,MAAQZ,EACb9B,KAAKqB,OAAS,GACdrB,KAAKsB,OAAS,GACdtB,KAAK2C,WAAa,GAClB3C,KAAK4C,OAAsB,EAAb5C,KAAK0C,MACf1C,KAAK4C,SAAwB,EAAb5C,KAAK0C,QAAW1C,KAAK6C,UAAY,SACrD7C,KAAK8C,OAAS,EACd9C,KAAK+C,UAAY,QACjB/C,KAAKwC,cAAgB,GACrBxC,KAAKuC,qBAAuB,EAE5BvC,KAAKwC,cAAc,GAAK,CACpBtB,EAAGlB,KAAK0C,MACRvB,EAAGnB,KAAK0C,OAEZ1C,KAAKgD,KAAO,SAACH,GAKT,OAFA,EAAKA,UAAYA,EAET,EAAKA,WACT,IAAK,OACDjD,EAAYU,QAAQsC,QAAUhD,EAAYU,QAAQoC,MAClD9C,EAAYU,QAAQwC,OAAS,EAE7B,MACJ,IAAK,QACDlD,EAAYU,QAAQsC,QAAUhD,EAAYU,QAAQoC,MAClD9C,EAAYU,QAAQwC,OAAS,EAE7B,MACJ,IAAK,KAEDlD,EAAYU,QAAQsC,OAAS,EAC7BhD,EAAYU,QAAQwC,QAAUlD,EAAYU,QAAQoC,MAElD,MACJ,IAAK,OAED9C,EAAYU,QAAQsC,OAAS,EAC7BhD,EAAYU,QAAQwC,QAAUlD,EAAYU,QAAQoC,MAElD,MACJ,QACI,MAAM,IAAIO,MAAM,kCAI5BjD,KAAKkD,OAAS,WAAa,IAAD,OAEtBlD,KAAKmD,aAELnD,KAAKkB,EAAIlB,KAAKqB,OACdrB,KAAKmB,EAAInB,KAAKsB,OAQdtB,KAAKwC,cAAcY,KANC,SAACC,EAAU3B,GAC3B,OACI/B,EAAWY,OAAO+C,YAAqB,IAAN5B,EAAWG,EAAQ,EAAKkB,UACzDpD,EAAWY,OAAOgD,WAAWF,EAASnC,EAAGmC,EAASlC,EAAG,EAAKuB,MAAO,EAAKA,WAMlF1C,KAAKmD,WAAa,WAEdnD,KAAKqB,OAASzB,EAAYU,QAAQkC,cAAc,GAAGtB,EACnDlB,KAAKsB,OAAS1B,EAAYU,QAAQkC,cAAc,GAAGrB,EACnDvB,EAAYU,QAAQkC,cAAcgB,MAGX,UAAnBxD,KAAK6C,UAED7C,KAAKkB,GAAKvB,EAAWY,OAAOE,MAAQ,KAAIT,KAAKkB,GAAK,IAE9B,SAAnBlB,KAAK6C,UACN7C,KAAKmB,GAAKxB,EAAWY,OAAOE,MAAQ,KAAIT,KAAKmB,GAAK,IAI9B,SAAnBnB,KAAK6C,UAEN7C,KAAKkB,GAAK,IAAGlB,KAAKkB,EAAIvB,EAAWY,OAAOE,OAEpB,OAAnBT,KAAK6C,WACN7C,KAAKmB,GAAK,IAAGnB,KAAKmB,EAAIxB,EAAWY,OAAOE,OAIzB,SAAnBT,KAAK6C,YAAsB7C,KAAKqB,QAAUrB,KAAK0C,OAC5B,OAAnB1C,KAAK6C,YAAoB7C,KAAKsB,QAAUtB,KAAK0C,OAC1B,UAAnB1C,KAAK6C,YAAuB7C,KAAKqB,QAAUrB,KAAK0C,OAC7B,SAAnB1C,KAAK6C,YAAsB7C,KAAKsB,QAAUtB,KAAK0C,OAG5B,UAAnB1C,KAAK6C,UAED7C,KAAKqB,QAAU1B,EAAWY,OAAOE,QAAOT,KAAKqB,OAAS,GAGlC,SAAnBrB,KAAK6C,UAEN7C,KAAKsB,QAAU3B,EAAWY,OAAOE,QAAOT,KAAKsB,OAAS,GAGlC,SAAnBtB,KAAK6C,UAEN7C,KAAKqB,SAAW,KAAIrB,KAAKqB,OAAS1B,EAAWY,OAAOE,MAAQ,IAGxC,OAAnBT,KAAK6C,WACN7C,KAAKsB,SAAW,KAAItB,KAAKsB,OAAS3B,EAAWY,OAAOE,MAAQ,IAIpET,KAAKkB,GAAKlB,KAAK4C,OACf5C,KAAKmB,GAAKnB,KAAK8C,OAEf,IAAIvB,EAAU,CACVL,EAAGlB,KAAKqB,OACRF,EAAGnB,KAAKsB,QAGZtB,KAAKwC,cAAciB,QAAQlC,GAE3BvB,KAAK0D,eAAe1D,KAAKqB,OAAQrB,KAAKsB,OAAQC,IAMlDvB,KAAK0D,eAAiB,SAACrC,EAAQC,EAAQC,GAEnC,IAAK,IAAIG,EAAI,EAAGA,EAAI9B,EAAYU,QAAQkC,cAAcb,OAAQD,IAErDL,IAAWzB,EAAYU,QAAQkC,cAAcd,GAAGR,GAAKI,IAAW1B,EAAYU,QAAQkC,cAAcd,GAAGP,GACtG,EAAKC,gBAAgBC,EAAQC,EAAQC,GAM7C,IAAK,IAAIG,EAAI,EAAGA,EAAI5B,EAAcQ,QAAQY,EAAES,OAAQD,IAE3C5B,EAAcQ,QAAQY,EAAEQ,GAAK5B,EAAcQ,QAAQG,MAAQY,GAAUA,GAAUvB,EAAcQ,QAAQY,EAAEQ,IAAM5B,EAAcQ,QAAQa,EAAEO,GAAK5B,EAAcQ,QAAQI,OAASY,GAAUA,GAAUxB,EAAcQ,QAAQa,EAAEO,IACtN,EAAKN,gBAAgBC,EAAQC,EAAQC,IAMjDvB,KAAKoB,gBAAkB,SAACC,EAAQC,EAAQC,GACpClC,EAAU,GAEVO,EAAYU,QAAQkC,cAAc,GAAGtB,EAAI,GACzCtB,EAAYU,QAAQkC,cAAc,GAAGrB,EAAI,GAQzCI,EAAU,CACNL,EAPKtB,EAAYU,QAAQkC,cAAc,GAAGtB,EAQ1CC,EAPKvB,EAAYU,QAAQkC,cAAc,GAAGrB,GAU9CvB,EAAYU,QAAQkC,cAAcmB,OAAO,EAAG/D,EAAYU,QAAQkC,cAAcb,OAAQJ,OAO/F,CAAC/B,EAAOH,IAGX,IAAMc,EAAiB,SAAjBA,IAEFR,EAAWgB,QAEXb,EAAcQ,QAAQkB,cAEtB5B,EAAYU,QAAQ4C,SAEpBrD,EAAYS,QAAQgC,mBACpBsB,YAAW,WACXjE,EAAWM,SAAYC,sBAAsBC,KAC3C,MAGN,OACI,oCACI,4BAAQ0D,UAAU,SAASC,IAAKrE,EAAOsE,MAAO,CAAEC,gBAAiB,SAAWvD,MAAO,IAAKC,OAAQ,MAChG,yBAAKmD,UAAU,eACX,4BAAQI,QAAS,kBAAMrE,EAAYU,QAAQ0C,KAAK,QAAhD,MACA,4BAAQiB,QAAS,kBAAMrE,EAAYU,QAAQ0C,KAAK,UAAhD,QACA,4BAAQiB,QAAS,kBAAMrE,EAAYU,QAAQ0C,KAAK,UAAhD,QACA,4BAAQiB,QAAS,kBAAMrE,EAAYU,QAAQ0C,KAAK,WAAhD,YCrVDkB,EAvBFC,IAAMC,MAAK,YAAsB,IAAnB7E,EAAkB,EAAlBA,KAAM8E,EAAY,EAAZA,MAS7B,OACI,0BAAMR,UAAU,aAAaS,SAPhB,SAACC,GACrBA,EAAEC,mBAOK,2BAAOC,QAAQ,SAAf,kBAA6C,6BAC7C,4BAASX,IAAMvE,EAAOmF,GAAG,SACrB,4BAASC,MAAM,QAAf,iBACA,4BAAQA,MAAM,UAAd,2CACA,4BAASA,MAAM,QAAf,mBAGN,4BAAQC,KAAK,SAASX,QAAUI,GAAhC,yBCVSQ,EATAV,IAAMC,MAAK,YAAe,IAAb9E,EAAY,EAAZA,OACxB,OACI,oCACA,2DACA,6BAAMA,OCSCwF,EAXCX,IAAMC,MAAK,YAA6B,IAA1B9E,EAAyB,EAAzBA,OAAQC,EAAiB,EAAjBA,KAAM8E,EAAW,EAAXA,MAExC,OACI,0BAAMR,UAAU,cACZ,kBAAC,EAAD,CAAQvE,OAASA,IACjB,kBAAC,EAAD,CAAM+E,MAAQA,EAAQ9E,KAAOA,QCiB1BwF,EAvBF,WAAO,IAAD,EACWC,mBAAS,GADpB,mBACV1F,EADU,KACFD,EADE,OAGe2F,mBAAS,QAHxB,mBAGPC,EAHO,KAGCC,EAHD,KAKX3F,EAAOG,iBAAO,QAEhByF,EAAYrE,uBAAY,WAE1B,OADAoE,EAAU3F,EAAKe,QAAQqE,OAChBM,IAGT,CAACA,IAEC,OAEI,oCACA,kBAAC,EAAD,CAAS1F,KAAS0F,EAAS3F,OAASA,EAASD,UAAYA,IACzD,kBAAC,EAAD,CAAUE,KAASA,EAAO8E,MAAUc,EAAe7F,OAASA,MCVrD8F,MARf,WACE,OACE,yBAAKvB,UAAU,OACd,kBAAC,EAAD,QCDLwB,IAASC,OACP,kBAAC,IAAMC,WAAP,KACI,kBAAC,EAAD,OAEJC,SAASC,eAAe,U","file":"static/js/main.350467e4.chunk.js","sourcesContent":["import React, { useRef, useEffect, useCallback } from 'react';\r\n\r\nconst Canvas = ({ setPoints, points, easy, score }) => {\r\n\r\n    let myRef = useRef();\r\n    let myGameArea = useRef()\r\n\r\n    let myGamePiece = useRef()\r\n    let myGameApple = useRef()\r\n    let myGameBarrier = useRef()\r\n\r\n    myGameArea = {\r\n        changeTime: function () { \r\n           this.interval =  requestAnimationFrame(updateGameArea)\r\n        },\r\n        start: function () {\r\n\r\n            this.ctx = myRef.current\r\n            this.canvas = this.ctx.getContext('2d')\r\n            this.canvas.width = 300;\r\n            this.canvas.height = 300;\r\n\r\n        },\r\n        clear: function () {\r\n\r\n            this.canvas.clearRect(0, 0, this.canvas.width, this.canvas.height);\r\n\r\n        },\r\n\r\n    };\r\n    let countPoints = useCallback((elementsSnake) => {\r\n        if (easy === \"easy\") {\r\n            setPoints(++points)\r\n\r\n        } else if (easy === \"harder\") {\r\n            setPoints(points + (elementsSnake * 2))\r\n        }\r\n        else if (easy === \"hard\") {\r\n            setPoints(points + (elementsSnake * 3))\r\n        }\r\n\r\n        return points\r\n\r\n    }, [easy, setPoints, points])\r\n\r\n    useEffect(() => {\r\n        myGameArea.changeTime()\r\n        return () => cancelAnimationFrame(myGameArea.interval);\r\n\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n\r\n        myGameArea.start()\r\n\r\n    }, [myGameArea]);\r\n\r\n    useEffect(() => {\r\n        function Barrier() {\r\n            this.x = [];\r\n            this.y = [];\r\n\r\n            if (easy === \"easy\") {\r\n                setPoints(0)\r\n                this.x = [0];\r\n                this.y = [0];\r\n                this.width = 0;\r\n                this.height = 0;\r\n\r\n\r\n            }\r\n            else if (easy === \"harder\") {\r\n                myGamePiece.current.snakeReturnHome(myGamePiece.current.snakeX, myGamePiece.current.snakeY, myGamePiece.current.newHead)\r\n\r\n                this.x = [60];\r\n                this.y = [160];\r\n                this.width = 160;\r\n                this.height = 20;\r\n\r\n\r\n            }\r\n            else if (easy === \"hard\") {\r\n\r\n                myGamePiece.current.snakeReturnHome(myGamePiece.current.snakeX, myGamePiece.current.snakeY, myGamePiece.current.newHead)\r\n\r\n                this.x = [40, 80, 120, 20]\r\n                this.y = [40, 100, 160, 200];\r\n                this.width = 160;\r\n                this.height = 20;\r\n            }\r\n            this.drawBarrier = () => {\r\n\r\n                myGameArea.canvas.fillStyle = \"red\";\r\n                if (easy === \"hard\") {\r\n                    for (let i = 0; i < this.x.length; i++) {\r\n                        myGameArea.canvas.fillRect(this.x[i], this.y[i], this.width, this.height);\r\n                    }\r\n                }\r\n                myGameArea.canvas.fillRect(this.x, this.y, this.width, this.height);\r\n            }\r\n        }\r\n        myGameBarrier.current = new Barrier()\r\n\r\n    }, [easy, myGamePiece, setPoints]);\r\n\r\n    useEffect(() => {\r\n\r\n        function Apple(x, y, color, sizeX, sizeY) {\r\n            console.log('math')\r\n\r\n            this.x = (Math.floor(Math.random() * (300 - 0)) + 0);\r\n            this.y = (Math.floor(Math.random() * (300 - 0)) + 0);\r\n            this.x = this.x - this.x % 20;\r\n            this.y = this.y - this.y % 20;\r\n            this.width = sizeX;\r\n            this.height = sizeY;\r\n\r\n\r\n            this.randomPlaceApple = (x, y) => {\r\n                x = (Math.floor(Math.random() * (300 - 0)) + 0);\r\n                y = (Math.floor(Math.random() * (300 - 0)) + 0);\r\n                x = x - x % 20;\r\n                y = y - y % 20;\r\n                return (\r\n                    x,\r\n                    y\r\n                )\r\n            }\r\n            this.changePlaceApple = () => {\r\n                for (let i = 0; i < myGameBarrier.current.x.length; i++) {\r\n\r\n                    if (myGameBarrier.current.x[i] + myGameBarrier.current.width > this.x && this.x >= myGameBarrier.current.x[i] && myGameBarrier.current.y[i] + myGameBarrier.current.height > this.y && this.y >= myGameBarrier.current.y[i]) {\r\n                        console.log('ogogn')\r\n\r\n                        this.randomPlaceApple(this.x, this.y)\r\n                    }\r\n\r\n                    else if ((myGamePiece.current.x === this.x && myGamePiece.current.y === this.y) || (myGamePiece.current.x === this.x && myGamePiece.current.y + 1 === this.y)) {\r\n\r\n                        myGamePiece.current.partBodySnakeCounter++;\r\n\r\n                        myGamePiece.current.partBodySnake.push({\r\n                            x: this.scale,\r\n                            y: this.scale\r\n                        })\r\n\r\n                        countPoints(myGamePiece.current.partBodySnakeCounter);\r\n\r\n                        this.randomPlaceApple(this.x, this.y)\r\n                        console.log('bariera')\r\n                    }\r\n\r\n                    myGameArea.canvas.fillStyle = color;\r\n\r\n                    myGameArea.canvas.fillRect(this.x, this.y, sizeX, sizeY);\r\n\r\n                }\r\n            }\r\n\r\n        };\r\n\r\n        myGameApple.current = new Apple(40, 40, 'red', 20, 20);\r\n\r\n    });\r\n\r\n    useEffect(() => {\r\n\r\n        function SnakeDraw(color = \"white\", sizeX = 20) {\r\n            this.scale = sizeX;\r\n            this.snakeX = 20;\r\n            this.snakeY = 20;\r\n            this.scoreArray = [];\r\n            this.speedX = this.scale * 1;\r\n            if (this.speedX === this.scale * 1) this.direction = \"right\";\r\n            this.speedY = 0;\r\n            this.colorTail = \"black\";\r\n            this.partBodySnake = [];\r\n            this.partBodySnakeCounter = 0;\r\n\r\n            this.partBodySnake[0] = {\r\n                x: this.scale,\r\n                y: this.scale\r\n            }\r\n            this.move = (direction) => {\r\n\r\n\r\n                this.direction = direction\r\n\r\n                switch (this.direction) {\r\n                    case \"left\":\r\n                        myGamePiece.current.speedX = -myGamePiece.current.scale;\r\n                        myGamePiece.current.speedY = 0\r\n\r\n                        break;\r\n                    case \"right\":\r\n                        myGamePiece.current.speedX = +myGamePiece.current.scale;\r\n                        myGamePiece.current.speedY = 0\r\n\r\n                        break;\r\n                    case \"up\":\r\n\r\n                        myGamePiece.current.speedX = 0\r\n                        myGamePiece.current.speedY = -myGamePiece.current.scale\r\n\r\n                        break;\r\n                    case \"down\":\r\n\r\n                        myGamePiece.current.speedX = 0\r\n                        myGamePiece.current.speedY = +myGamePiece.current.scale\r\n\r\n                        break;\r\n                    default:\r\n                        throw new Error(\"the direction does not exist\")\r\n                }\r\n\r\n            }\r\n            this.update = function () {\r\n\r\n                this.snakeTurns()\r\n\r\n                this.x = this.snakeX;\r\n                this.y = this.snakeY;\r\n\r\n                const squareSnake = (partBody, i) => {\r\n                    return (\r\n                        myGameArea.canvas.strokeStyle = (i === 0) ? color : this.colorTail,\r\n                        myGameArea.canvas.strokeRect(partBody.x, partBody.y, this.scale, this.scale)\r\n                    )\r\n                }\r\n                this.partBodySnake.map(squareSnake)\r\n\r\n            }\r\n            this.snakeTurns = function () {\r\n\r\n                this.snakeX = myGamePiece.current.partBodySnake[0].x;\r\n                this.snakeY = myGamePiece.current.partBodySnake[0].y;\r\n                myGamePiece.current.partBodySnake.pop()\r\n\r\n\r\n                if (this.direction === \"right\") {\r\n\r\n                    if (this.x >= myGameArea.canvas.width - 20) this.x = -20;\r\n                }\r\n                else if (this.direction === \"down\") {\r\n                    if (this.y >= myGameArea.canvas.width - 20) this.y = -20;\r\n\r\n                }\r\n\r\n                else if (this.direction === \"left\") {\r\n\r\n                    if (this.x <= 0) this.x = myGameArea.canvas.width;\r\n                }\r\n                else if (this.direction === \"up\") {\r\n                    if (this.y <= 0) this.y = myGameArea.canvas.width;\r\n                }\r\n\r\n\r\n                if (this.direction === \"left\") this.snakeX -= this.scale;\r\n                if (this.direction === \"up\") this.snakeY -= this.scale;\r\n                if (this.direction === \"right\") this.snakeX += this.scale;\r\n                if (this.direction === \"down\") this.snakeY += this.scale;\r\n\r\n\r\n                if (this.direction === \"right\") {\r\n\r\n                    if (this.snakeX >= myGameArea.canvas.width) this.snakeX = 0;\r\n\r\n                }\r\n                else if (this.direction === \"down\") {\r\n\r\n                    if (this.snakeY >= myGameArea.canvas.width) this.snakeY = 0;\r\n\r\n                }\r\n                else if (this.direction === \"left\") {\r\n\r\n                    if (this.snakeX <= -20) this.snakeX = myGameArea.canvas.width - 20;\r\n\r\n                }\r\n                else if (this.direction === \"up\") {\r\n                    if (this.snakeY <= -20) this.snakeY = myGameArea.canvas.width - 20;\r\n\r\n                }\r\n\r\n                this.x += this.speedX;\r\n                this.y += this.speedY;\r\n\r\n                let newHead = {\r\n                    x: this.snakeX,\r\n                    y: this.snakeY\r\n                }\r\n\r\n                this.partBodySnake.unshift(newHead)\r\n\r\n                this.snakeCollision(this.snakeX, this.snakeY, newHead)\r\n\r\n\r\n\r\n\r\n            }\r\n            this.snakeCollision = (snakeX, snakeY, newHead) => {\r\n\r\n                for (let i = 1; i < myGamePiece.current.partBodySnake.length; i++) {\r\n\r\n                    if ((snakeX === myGamePiece.current.partBodySnake[i].x && snakeY === myGamePiece.current.partBodySnake[i].y)) {\r\n                        this.snakeReturnHome(snakeX, snakeY, newHead)\r\n\r\n\r\n                    }\r\n\r\n                }\r\n                for (let i = 0; i < myGameBarrier.current.x.length; i++) {\r\n\r\n                    if ((myGameBarrier.current.x[i] + myGameBarrier.current.width > snakeX && snakeX >= myGameBarrier.current.x[i] && myGameBarrier.current.y[i] + myGameBarrier.current.height > snakeY && snakeY >= myGameBarrier.current.y[i])) {\r\n                        this.snakeReturnHome(snakeX, snakeY, newHead)\r\n\r\n                    }\r\n\r\n                }\r\n            }\r\n            this.snakeReturnHome = (snakeX, snakeY, newHead) => {\r\n                setPoints(0)\r\n\r\n                myGamePiece.current.partBodySnake[0].x = 20;\r\n                myGamePiece.current.partBodySnake[0].y = 20;\r\n\r\n                snakeX = myGamePiece.current.partBodySnake[0].x\r\n                snakeY = myGamePiece.current.partBodySnake[0].y\r\n\r\n\r\n\r\n\r\n                newHead = {\r\n                    x: snakeX,\r\n                    y: snakeY\r\n                }\r\n\r\n                myGamePiece.current.partBodySnake.splice(0, myGamePiece.current.partBodySnake.length, newHead)\r\n            }\r\n        }\r\n\r\n        myGamePiece.current = new SnakeDraw();\r\n\r\n\r\n    }, [score, setPoints]);\r\n\r\n\r\n    const updateGameArea = () => {\r\n\r\n        myGameArea.clear();\r\n\r\n        myGameBarrier.current.drawBarrier()\r\n\r\n        myGamePiece.current.update();\r\n\r\n        myGameApple.current.changePlaceApple();\r\n        setTimeout(function(){\r\n        myGameArea.interval =  requestAnimationFrame(updateGameArea)\r\n        },300)\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <canvas className='canvas' ref={myRef} style={{ backgroundColor: 'green' }} width={300} height={300} />\r\n            <div className='listButtons'>\r\n                <button onClick={() => myGamePiece.current.move('up')}>up</button>\r\n                <button onClick={() => myGamePiece.current.move('down')}>down</button>\r\n                <button onClick={() => myGamePiece.current.move('left')}>left</button>\r\n                <button onClick={() => myGamePiece.current.move('right')}>right</button>\r\n            </div>\r\n        </>\r\n    );\r\n\r\n}\r\n\r\nexport default Canvas","import React from 'react'\r\n\r\n\r\nconst Form = React.memo(({ easy, click }) => {\r\n\r\n\r\n  const handleSubmit=(e) =>{\r\n e.preventDefault()\r\n\r\n \r\n }\r\n\r\n    return ( \r\n        <form className='levelInput' onSubmit={ handleSubmit }>\r\n        <label htmlFor=\"level\">Wybierz poziom</label><br />\r\n        <select  ref={ easy } id=\"level\">\r\n            <option  value=\"easy\">Łatwizna</option>\r\n            <option value=\"harder\">Rozgrzewka przed prawdziwymi problemami</option>\r\n            <option  value=\"hard\">Nie dasz rady </option>\r\n\r\n        </select>\r\n      <button type=\"submit\" onClick={ click }>Rozpocznij poziom</button>  \r\n    </form>\r\n     );\r\n})\r\n \r\nexport default Form;","import React from 'react';\r\n\r\nconst Points = React.memo(({points}) => {\r\n    return (\r\n        <>\r\n        <h5>Liczba zdobytych punktów</h5>\r\n        <div>{points}</div>\r\n        </>\r\n      );\r\n})\r\n \r\nexport default Points;","import React from 'react';\r\nimport Form from '../molecule/Form';\r\nimport Points from '../molecule/Points';\r\n\r\nconst Console = React.memo(({ points, easy, click}) => {\r\n\r\n    return (\r\n        <main className='pointsForm'>\r\n            <Points points={ points } />\r\n            <Form click={ click } easy={ easy } />\r\n          \r\n        </main>\r\n    );\r\n})\r\n\r\nexport default Console;","import React, { useState, useRef, useCallback } from 'react';\r\nimport Canvas from \"../molecule/Canvas\";\r\nimport Console from \"../organizm/Console\"\r\nconst Main = () => {\r\n    let [points, setPoints] = useState(0);\r\n    // let [score, setScore] = useState([2])\r\n       let [option, setOption ] = useState(\"easy\")\r\n\r\n    let easy = useRef(\"easy\");\r\n\r\nconst handleClick=useCallback(()=>{\r\n    setOption(easy.current.value)\r\n    return option\r\n   \r\n    \r\n},[option])\r\n\r\n    return ( \r\n\r\n        <>\r\n        <Canvas  easy = { option } points={ points } setPoints={ setPoints }/>\r\n        <Console  easy = { easy } click = { handleClick }  points={ points }/>\r\n        </>\r\n     );\r\n}\r\n \r\nexport default Main;\r\n","import React from 'react';\nimport '../styles/scss/App.scss';\nimport Main from \"../Templates/Main\"\nfunction App() {\n  return (\n    <div className=\"App\">\n     <Main/>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './pages/App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n      <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}